  // 因为是系统级的操作,建议用root
  
  // 1 容器与开发语言
  //   Docker
  //   Go
  //   小结
  // 2 基础技术
  //   Linux Namespace 介绍
  //     概念
  //     UTS Namespace
  //     IPC Namespace
  //     PID Namespace
  //     Mount Namespace
  //     User Namespace
  //     Network Namespace
  //   Linux Cgroups介绍
  //   Union File System
  //   小结
  // 换1.7.1版本,位置:
  cd /root/.gvm/pkgsets/go1.7.1/global/src/github.com/xianlubird/mydocker

  // 2 基础技术
  //   Linux Namespace 介绍
  //     概念
clone()   //- 创建新进程。根据系统调用参数来判断哪种类型的namespace被创建，而且它们的子进程也会被包含到namespace中
unshare() //- 将进程移出某个namespace
setns()   //- 将进程加入到namesp中

  //     UTS Namespace
// 主要隔离nodename 和domainname ,可以有自己的hostname
touch main.go
vi !$
go run main.go

pstree -pl
// 查看进程关系

sshd(1297)───bash(1298)───su(1455)───   \
  bash(1456)───go(1553)─┬─main(1565)─┬─sh(1568)───pstree(1571)

echo $$   //1568

readlink /proc/1565/ns/uts
// uts:[4026531838]
readlink /proc/1568/ns/uts
// uts:[4026532430]

hostname -b bird
hostname  //bird

// 启动新的ssh连接
hostname  //ubuntu 

  //     IPC Namespace
// IPC Namespace 是用来隔离 System V IPC 和POSIX message queues ?
vi main.go

ipcs -q
// 查看现有ipc message queue

ipcmk -Q
ipcs -q
// 自建一个

// 启动新的ssh连接
/go/src/github.com/xianlubird/mydocker
go run main.go 
ipcs -q //没有值


  //     PID Namespace
// 进程id
vi main.go
go run main.go
echo $$  // 1

// 查看另一个shell 为1780
pstree -pl
// bash(1708)---go(1768)-+-main(1780)-+-sh(1784)
// ps和top看的是/proc下的内容


  //     Mount Namespace
// mount namespace 是用来隔离各个进程看到的挂载点视图
// 在不同namespace中的进程看到的文件系统层次不一样
// 在mount namespace 中调用mount()和umount()仅仅只会影响当前namespace内的文件系统，
//   对全局的文件系统是没有影响
vi main.go

go run main.go
ls /proc

mount -t proc proc /proc
// 将/proc mount到我们自己的namesapce下面,类型为proc,名字proc
ls /proc   //数量大大减少
ps -ef


  //     User Namespace
// User namespace 主要是隔离用户的用户组ID
// 一个进程的User ID 和Group ID 在User namespace 内外经常是不同的
// 从Linux kernel 3.8开始，非root进程也可以创建User namespace
vi main.go
id   //0
go run main.go
id   //5001
// 看不懂的语句先放一边

  //     Network Namespace
vi main.go
ifconfig
go run main.go
ifconfig  //空


  //   Linux Cgroups介绍
  //     什么是Linux Cgroups
// 通过Cgroups，可以方便的限制某个进程的资源占用，并且可以实时的监控进程的监控和统计信息
cgroup      //一个cgroup包含一组进程
subsystem   //资源控制的模块
  blkio
  cpu
  cpuacct
  cpuset
  devices
  freezer
  memory
  net_cls
  net_prio
  ns
hierarchy  //把一组cgroup串成一个树状的结构, 可以继承

apt-get install cgroup-bin
lssubsys   //支持的subsystem

  // kernel接口
// 挂载一个hierarchy树
mkdir cgroup-test
sudo mount -t cgroup -o none,name=cgroup-test cgroup-test ./cgroup-test

ls ./cgroup-test
// cgroup.clone_children   cpuset的subsystem会读取这个配置文件
// cgroup.procs            树中当前节点的cgroup中的进程组ID,根
// cgroup.sane_behavior     
// notify_on_release       cgroup最后一个进程退出的时候是否执行release_agent
// release_agent           
// tasks                   该cgroup下面的进程ID,进程ID写到tasks文件中，进程加入cgroup

apt-get install tree
cd cgroup-test
sudo mkdir cgroup-1
sudo mkdir cgroup-2
tree
// 继承父cgroup的属性,明白继承的意思了

// 一个进程在一个Cgroups的hierarchy中只能存在在一个cgroup节点上
echo $$   //2522
sudo sh -c "echo $$" >> tasks 
cat tasks
cat /proc/2522/cgroup 
// 之前创建hierarchy的时候，并没有关联到任何subsystem，没办法通过hierarchy中的cgroup限制进程的资源占用

mount | grep memory
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
// u14没有显示

apt-get install stress
cd /sys/fs/cgroup/memory

// 新开一个shell,开启top命令
stress --vm-bytes 200m --vm-keep -m 1   //不做限制启动一个占用内存的stress进程  20%

sudo mkdir test-limit-memory && cd test-limit-memory    // 创建一个cgroup
sudo sh -c "echo "100m" > memory.limit_in_bytes"        // 设置最大cgroup最大内存占用为100m
sudo sh -c "echo $$ > tasks"                            // 将当前进程移动到这个cgroup中
stress --vm-bytes 200m --vm-keep -m 1                   // 再次运行占用内存200m的的stress进程  10%


  //     Docker是如何使用Cgroups的
// docker run -m 
sudo docker run -itd -m 128m ubuntu
cd /sys/fs/cgroup/memory/docker/2f79ceb402fd832f13c6f25623571c8b5b80ba1a08f95672f58e3006430cf2f5/
cat memory.limit_in_bytes 
cat memory.usage_in_bytes 

  //     用Go语言实现通过cgroup限制容器的资源
vi main.go
go run main.go
// 新开一个shell, top , ls  testmemorylimit等

  //   Union File System
  //     什么是Union File System
// 把其他文件系统联合到一个联合挂载点的文件系统服务,
// 当对这个虚拟后的联合文件系统进行写操作的时候，系统是真正写到了一个新的文件中

// 写时复制 copy-on-write CoW (隐式共享) ,相同文件不写,修改资源写
// 应用 Knoppix 光盘操作系统, 改动写在u盘上

  //     AUFS
// Advanced multi-layered unification filesystem

  //     Docker是如何使用AUFS的
// image layer和AUFS
docker version
// Version: 18.01.0-ce

// image layers内容
"LowerDir": "/var/lib/docker/overlay2/9b56f9814f5152ecf7c6e4812dc64e887459204ecd5df93d847556b2d364ab53/diff:\
    /var/lib/docker/overlay2/42a1e6d19b155b03ffe6e330e2d49bdeb299b5781038753b2adde772ee8b821e/diff:\
    /var/lib/docker/overlay2/57f44118efe3d0219980923034cc1fdca57fc6a8267ec88109980b3220e3bd55/diff"

"MergedDir": "/var/lib/docker/overlay2/a31e107d1a79e49330477314bc02f7258f0192ff4bf4ee692456f716f1a8657c/merged",
"UpperDir": "/var/lib/docker/overlay2/a31e107d1a79e49330477314bc02f7258f0192ff4bf4ee692456f716f1a8657c/diff",
"WorkDir": "/var/lib/docker/overlay2/a31e107d1a79e49330477314bc02f7258f0192ff4bf4ee692456f716f1a8657c/work"

// metadata如何堆栈这些layer
 "RootFS": {
     "Type": "layers",
     "Layers": [
         "sha256:3cbe18655eb617bf6a146dbd75a63f33c191bf8c7761bd6a8d68d53549af334b",
         "sha256:84cc3d400b0d610447fbdea63436bad60fb8361493a32db380bd5c5a79f92ef4",
         "sha256:ed58a6b8d8d6a4e2ecb4da7d1bf17ae8006dac65917c6a050109ef0a5d7199e6",
         "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
     ]
 },
 "Metadata": {
     "LastTagTime": "0001-01-01T00:00:00Z"
 }

ls "/var/lib/docker/overlay2/eab1b5c6a8c3b35deb236d994272e15766ec9be2b94c09811946794c2da86135/diff/mnt"
// 镜像相关

// layers 目录不存在了

vi Dockerfile
docker build -t changed-ubuntu .

docker images
docker history changed-ubuntu
// 自Docker 1.10之后，一个镜像的image layers的image history数据都存储在一个文件中

docker inspect 17ccef24c798
"a31e107d1a79e49330477314bc02f7258f0192ff4bf4ee692456f716f1a8657c"
// 原来的最上层 

"3f23713e0eb85bc8c0468dfad60bdcbbe819168fb5d026bbe53b328ed9538891"
// 新的层   /deff目录下有新增内容
// 镜像的id和其位置的id没啥关系 由inspect获得的, 而容器的有很大的关系


// container layer和AUFS
// 对于一个容器，每一个image layer最多只需要拷贝一次。后续的改动都会在第一次拷贝的container layer上进行

// 启动一个Container的时候，Docker会为其创建一个read-only的init layer，用来存储与这个容器内环境相关的内容；
//    Docker还会为其创建一个read-write的layer用来执行所有写操作

// Container layer的mount目录
"/var/lib/docker/overlay2/8336c02191c18b1256f80f0a07b23ca079df7843d30ee3b55f39b9c7fa2554be/mnt"
// mount目录 镜像里的WorkDir? 
// Container的metadata和配置文件
ls /var/lib/docker/containers

// Container的read-write layer
"/var/lib/docker/overlay2/8336c02191c18b1256f80f0a07b23ca079df7843d30ee3b55f39b9c7fa2554be/diff"
// 新版本后,格式变了,目录应该还没变
// 容器停止,容器仍然存在,直到docker rm

docker run -dit changed-ubuntu bash
docker ps -a

ls /var/lib/docker/overlay2/ 
// overlay2下面多了2个层

"7f7d75956d9f4ad3aa1966cbd33ab8b92ebaf8852bc305233173045fa88bac5a"/
// Docker为容器创建的read-write layer?

"7f7d75956d9f4ad3aa1966cbd33ab8b92ebaf8852bc305233173045fa88bac5a-init"/
// Docker为容器创建的read-only的init layer ?

// layers 目录不存在, 用inspect可以查看依赖记录

ls /var/lib/docker/containers/
// 容器目录
"caf63b21b3330ee93f270825a21622be4f0982b0554c0f69d24cefddde100508"
// 和docker ps看的相同,容器的相关信息

// 删除file1 在container的read-write层生成一个.wh.file1 未验证

// 阿里的人也不靠谱啊, aufs直接没有了,我这用的是overlay2 扩展阅读
// https://arkingc.github.io/2017/05/05/docker-filesystem-overlay/

  //     自己动手写AUFS
// 创建一个AUFS文件系统，感受下如何使用AUFS和CoW实现文件管理
mkdir aufs 
cd !$
mkdir mnt container-layer
echo "I am container layer" > container-layer.txt
mv container-layer.txt  container-layer
mv !$ aufs
cd !$
cp image-layer1 image-layer2 -rf
// 修改文件的名字与值 ...


cat image-layer1/image-layer1.txt
// I am image layer 1

cat image-layer2/image-layer2.txt
// I am image layer 2

// 以此类推

pwd
// /root/aufs
sudo mount -t aufs -o dirs=./container-layer:./image-layer4:./image-layer3:./image-layer2:./image-layer1 none ./mnt
tree mnt

mnt
├── container-layer.txt
├── image-layer1.txt
├── image-layer2.txt
├── image-layer3.txt
└── image-layer4.txt

ls  /sys/fs/aufs/
// config  si_c2682246e4a009a4

cat !$/si_c2682246e4a009a4/*
cat /sys/fs/aufs//si_c2682246e4a009a4/*
/root/aufs/container-layer=rw
/root/aufs/image-layer4=ro
/root/aufs/image-layer3=ro
/root/aufs/image-layer2=ro
/root/aufs/image-layer1=ro
64
65
66
67
68
/root/aufs/container-layer/.aufs.xino

注意aufs的挂载权限文件 br0, br1, brid1,
*/

// 经过自己挂载, aufs的文件系统还是出来了,
// 但是貌似现在用到的不多,所以先不研究docker改挂载方式的问题了

// 更新layer1层
echo -e "\nwrite to mnt's image-layer1.txt" >> ./mnt/image-layer4.txt

cat mnt/image-layer4.txt 
// I am image layer 4
// write to mnt's image-layer1.txt

cat image-layer4/image-layer4.txt 
// I am image layer 4

ls container-layer/
// container-layer.txt  image-layer4.txt

// 当尝试向mnt/image-layer4.txt文件进行写操作，系统首先在mnt目录下查找名为image-layer4.txt的文件，将其拷贝
// 到read-write层的container-layer目录中，接着对container-layer目录中的image-layer4.txt文件进行写操作

  //   小结
// 这样第二章就完成了,虽然因为docker的更新,aufs测试的很勉强,但同时了解到overlay2,也算不亏
// 以上,谢谢观看